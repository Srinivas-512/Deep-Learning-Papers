import torch
import torch.nn.module
import torch.nn.functional as func

class VGG19(torch.nn.Module):
    def __init__(self, **kwargs):
        super(VGG19, self).__init__()
        self.conv_layer1=torch.nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1)
        self.conv_layer2=torch.nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1)
        self.pool1 = torch.nn.MaxPool2d(kernel_size = 2, padding=0, stride=2)
        self.conv_layer3=torch.nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.conv_layer4=torch.nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1)
        self.pool2 = torch.nn.MaxPool2d(kernel_size = 2, padding=0, stride=2)
        self.conv_layer5=torch.nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1)
        self.conv_layer6=torch.nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.conv_layer7=torch.nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.conv_layer8=torch.nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.pool3 = torch.nn.MaxPool2d(kernel_size = 2, padding=0, stride=2)
        self.conv_layer9=torch.nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1)
        self.conv_layer10=torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.conv_layer11=torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.conv_layer12=torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.pool4 = torch.nn.MaxPool2d(kernel_size = 2, padding=0, stride=2)
        self.conv_layer13=torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.conv_layer14=torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.conv_layer15=torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.conv_layer16=torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.pool5 = torch.nn.MaxPool2d(kernel_size = 2, padding=0, stride=2)
        self.classifier1 = torch.nn.Linear(in_features=512*7*7, out_features= 4096)
        self.dropout = torch.nn.Dropout(0.5)
        self.classifier2 = torch.nn.Linear(in_features= 4096, out_features= 4096)
        self.dropout = torch.nn.Dropout(0.5)
        self.classifier3 = torch.nn.Linear(in_features=4096 , out_features=10) 

    def forward(self, x):
        out = func.relu(self.conv_layer1(x))
        out = self.pool1(func.relu(self.conv_layer2(out)))
        out = func.relu(self.conv_layer3(out))
        out = self.pool2(func.relu(self.conv_layer4(out)))
        out = func.relu(self.conv_layer5(out))
        out = func.relu(self.conv_layer6(out))
        out = func.relu(self.conv_layer7(out))
        out = self.pool3(func.relu(self.conv_layer8(out)))
        out = func.relu(self.conv_layer9(out))
        out = func.relu(self.conv_layer10(out))
        out = func.relu(self.conv_layer11(out))
        out = self.pool4(func.relu(self.conv_layer12(out)))
        out = func.relu(self.conv_layer13(out))
        out = func.relu(self.conv_layer14(out))
        out = func.relu(self.conv_layer15(out))
        out = self.pool5(func.relu(self.conv_layer16(out)))
        out = out.reshape(out.size(0), -1)
        out = func.relu(self.classifier1(out))
        out = func.relu(self.classifier2(out))
        out = func.log_softmax(self.classifier3(out))
        return out